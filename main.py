import os
import json
import logging
import hashlib
import requests

from mutagen.mp3 import MP3
from dotenv import load_dotenv
from aiogram import Bot, filters
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.types import InlineQuery, InputTextMessageContent, InlineQueryResultArticle, InlineKeyboardMarkup, Message, CallbackQuery, InlineKeyboardButton


load_dotenv('.env')
logging.basicConfig(level=logging.INFO)

bot = Bot(token=os.environ.get('TG_TOKEN'))
dp = Dispatcher(bot)
musicfolder = '/home/icecast/music'
chatid = '-1001646996853'
logsid = '-629518744'
whitelist = [1888296065, 1999113390, 1618915689, 834381991, 1279811417, 837236788]
admins = [1888296065, 1999113390, 1618915689]

@dp.message_handler(filters.Command('stopices'))
async def stopices(message: Message):
    if message.from_user.id not in whitelist:
        await message.reply('–ü–æ—à—ë–ª –Ω–∞—Ö—É–π!')
    else:
        username = message.from_user.username
        if "_" in username:
            username = username.replace('_', '\_')
        await message.answer('Ices —Å—Ç–æ–ø–Ω—É—Ç, –º–æ–∂–µ—Ç–µ –≤—Ä—ã–≤–∞—Ç—å—Å—è —Å —Ä–∞–¥–∏–æ–±–æ—Å—Å–∞')
        os.system('/home/icecast/stopices')
        await bot.send_message(logsid, f'#stopices\nuser: @{username}', parse_mode='markdown')

@dp.message_handler(filters.Command('startices'))
async def startices(message: Message):
    if message.from_user.id not in whitelist:
        await message.reply('–ü–æ—à—ë–ª –Ω–∞—Ö—É–π!')
    else:
        username = message.from_user.username
        if "_" in username:
            username = username.replace('_', '\_')
        await message.answer('Ices –∑–∞–ø—É—â–µ–Ω, –≤–µ–¥–µ—Ç—Å—è –ø–æ—Ç–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞')
        os.system('/home/icecast/startices')
        await bot.send_message(logsid, f'#startices\nuser: @{username}', parse_mode='markdown')

@dp.message_handler(filters.Command('updateplaylist'))
async def updateplaylist(message: Message):
    if message.from_user.id not in whitelist:
        await message.reply('–ü–æ—à—ë–ª –Ω–∞—Ö—É–π!')
    else:
        username = message.from_user.username
        if "_" in username:
            username = username.replace('_', '\_')
        await message.answer('–ü–ª–µ–π–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Ices')
        os.system('/home/icecast/updateplaylist')
        await bot.send_message(logsid, f'#updateplaylist\nuser: @{username}', parse_mode='markdown')

@dp.message_handler(filters.Command('restartices'))
async def restartices(message: Message):
    if message.from_user.id not in whitelist:
        await message.reply('–ü–æ—à—ë–ª –Ω–∞—Ö—É–π!')
    else:
        username = message.from_user.username
        if "_" in username:
            username = username.replace('_', '\_')
        await message.answer('Ices –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!')
        os.system('/home/icecast/restartices')
        await bot.send_message(logsid, f'#restartices\nuser: @{username}', parse_mode='markdown')

@dp.message_handler(filters.Command('nowplaying'))
async def nowplaying(message: Message):
    url = 'https://radio.hyperyaderi.ru/status-json.xsl'
    resp = requests.get(url).text
    data = json.loads(resp)
    nowplaying = data['icestats']['source']['title']
    await message.answer(f'–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: *{nowplaying}*', parse_mode='markdown')

@dp.message_handler(filters.Command('listeners'))
async def listeners(message: Message):
    url = 'https://radio.hyperyaderi.ru/status-json.xsl'
    resp = requests.get(url).text
    data = json.loads(resp)
    listeners = data['icestats']['source']['listeners']
    listener_peak = data['icestats']['source']['listener_peak']
    await message.answer(f'–°–µ–π—á–∞—Å —Ä–∞–¥–∏–æ —Å–ª—É—à–∞—é—Ç *{listeners}* —á–µ–ª.\n–ü–∏–∫: *{listener_peak}* —á–µ–ª.', parse_mode='markdown')

@dp.message_handler(filters.Command('cleartags'))
async def cleartags(message: Message):
    if message.from_user.id not in whitelist:
        await message.reply('–ü–æ—à—ë–ª –Ω–∞—Ö—É–π!')
    else:
        username = message.from_user.username
        if "_" in username:
            username = username.replace('_', '\_')
        await message.reply('–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤!')
        for root, dirs, files in os.walk(musicfolder):
            for file in files:
                if file.endswith('.mp3'):
                    f = os.path.join(root, file)
                    try:
                        mp3 = MP3(f)
                        mp3.delete()
                        mp3.save()
                    except:
                        print('no ID3 tag')
        await message.reply('–¢–µ–≥–∏ —É–¥–∞–ª–µ–Ω—ã!')
        await bot.send_message(logsid, f'#cleartags\nuser: @{username}', parse_mode='markdown')

@dp.message_handler(filters.Command('deletetrack'))
async def deletetrack(message: Message):
    arguments = message.get_args()
    if message.from_user.id not in admins:
        await message.reply('–ü–æ—à—ë–ª –Ω–∞—Ö—É–π!')
    else:
        if arguments:
            await process_deletetrack(arguments, message)
            return
        else:    
            arguments = message.get_args()  
            url = 'https://radio.hyperyaderi.ru/status-json.xsl'
            resp = requests.get(url).text
            data = json.loads(resp)
            nowplaying = data['icestats']['source']['title']
            await message.answer(f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ *{nowplaying}*?\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π\n`/deletetrack {nowplaying}`', parse_mode="markdown")

async def process_deletetrack(zalupa, message):
    username = message.from_user.username
    if "_" in username:
        username = username.replace('_', '\_')
    filename = f'{musicfolder}/{zalupa}.mp3'
    caption = f'#deletetrack\nuser: @{username}\n{filename}'
    with open(filename, "rb") as file:
        await bot.send_audio(logsid, file, caption=caption, parse_mode='markdown')
        file.close()
    try:
        os.remove(filename)
    except FileNotFoundError:
        await bot.send_message(chatid, 'üö´ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
    await bot.send_message(chatid, f'‚úÖ –§–∞–π–ª <code>{filename}</code>\n<b>–±—ã–ª —É–¥–∞–ª—ë–Ω</b>', parse_mode="html")

@dp.inline_handler()
async def inline_nowplaying(inline_query: InlineQuery):
    url = 'https://radio.hyperyaderi.ru/status-json.xsl'
    resp = requests.get(url).text
    data = json.loads(resp)
    text = inline_query.query or 'np'
    match text:
        case 'np':
            input_content = InputTextMessageContent(text)
            result_id: str = hashlib.md5(text.encode()).hexdigest()
            nowplaying = data['icestats']['source']['title']
            item = InlineQueryResultArticle(
                                        id=result_id,
                                        title=f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –∏–≥—Ä–∞—é—â–∏–π —Å–µ–π—á–∞—Å –Ω–∞ —Ä–∞–¥–∏–æ',
                                        input_message_content=InputTextMessageContent(
                                            message_text=f'–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: *{nowplaying}*',
                                            parse_mode='markdown'
                                        )
                                    )
        case 'ls':
            input_content = InputTextMessageContent(text)
            result_id: str = hashlib.md5(text.encode()).hexdigest()
            listeners = data['icestats']['source']['listeners']
            listener_peak = data['icestats']['source']['listener_peak']
            item = InlineQueryResultArticle(
                                        id=result_id,
                                        title=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—à–∞—Ç–µ–ª–µ–π',
                                        input_message_content=InputTextMessageContent(
                                            message_text=f'–†–∞–¥–∏–æ —Å–ª—É—à–∞—é—Ç *{listeners}* —á–µ–ª.',
                                            parse_mode='markdown'
                                        )
                                    )
        case _:
            input_content = InputTextMessageContent(text)
            result_id: str = hashlib.md5(text.encode()).hexdigest()
            item = InlineQueryResultArticle(
                                        id=result_id,
                                        title=f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
                                        input_message_content=InputTextMessageContent(
                                            message_text=f'–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n*np* - —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –Ω–∞ —Ä–∞–¥–∏–æ\n*ls* - —É–∑–Ω–∞—Ç—å –∫–æ–ª-–≤–æ —Å–ª—É—à–∞—Ç–µ–ª–µ–π',
                                            parse_mode='markdown'
                                        )
                                    )
    await bot.answer_inline_query(inline_query.id, item, cache_time=1)

if __name__ == '__main__':
    executor.start_polling(dp)
